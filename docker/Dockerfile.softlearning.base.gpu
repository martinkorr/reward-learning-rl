# Base softlearning container that contains all softlearning requirements,
# but not the actual softlearning repo. Could be used for example when developing
# softlearning, in which case you would mount softlearning repo in to the container
# as a volume, and thus be able to modify code on the host, yet run things inside
# the container. You are encouraged to use docker-compose (docker-compose.dev.yml),
# which should allow you to setup your environment with a single one command.

ARG UBUNTU_VERSION=18.04
ARG ARCH=
ARG CUDA=10.0

FROM nvidia/cudagl${ARCH:+-$ARCH}:${CUDA}-base-ubuntu${UBUNTU_VERSION} as base
# ARCH and CUDA are specified again because the FROM directive resets ARGs
# (but their default value is retained if set previously)

ARG UBUNTU_VERSION
ARG ARCH
ARG CUDA
ARG CUDNN=7.4.1.5-1

ARG MJKEY

SHELL ["/bin/bash", "-c"]

# MAINTAINER Kristian Hartikainen <kristian.hartikainen@gmail.com>

ENV DEBIAN_FRONTEND="noninteractive"
# See http://bugs.python.org/issue19846
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH

RUN apt-get update --fix-missing && apt-get install -y wget bzip2 ca-certificates \
    libglib2.0-0 libxext6 libsm6 libxrender1 \
    git mercurial subversion

RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh && \
    /bin/bash /tmp/miniconda.sh -b -p /opt/conda && \
    rm /tmp/miniconda.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> /etc/bash.bashrc

RUN apt-get install -y curl grep sed dpkg && \
    TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:'` && \
    curl -L "https://github.com/krallin/tini/releases/download/v0.19.0/tini_0.19.0.deb" > tini.deb&& \
    dpkg -i tini.deb && \
    rm tini.deb && \
    apt-get clean \
    && rm -rf /var/lib/apt/lists/*


RUN conda update -y --name base conda \
    && conda clean --all -y


# ========== Tensorflow dependencies ==========
RUN apt-get update && apt-get install -y --no-install-recommends \
    && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub \
    && echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list \
    && echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        cuda-command-line-tools-${CUDA/./-} \
        cuda-cublas-${CUDA/./-} \
        cuda-cufft-${CUDA/./-} \
        cuda-curand-${CUDA/./-} \
        cuda-cusolver-${CUDA/./-} \
        cuda-cusparse-${CUDA/./-} \
        curl \
        libcudnn7=${CUDNN}+cuda${CUDA} \
        libfreetype6-dev \
        libhdf5-serial-dev \
        libzmq3-dev \
        pkg-config \
        software-properties-common \
        zip \
        unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN [ ${ARCH} = ppc64le ] || (apt-get update && \
        apt-get install nvinfer-runtime-trt-repo-ubuntu${UBUNTU_VERSION/./}-5.0.2-ga-cuda${CUDA} \
        && apt-get update \
        && apt-get install -y --no-install-recommends libnvinfer5=5.0.2-1+cuda${CUDA} \
        && apt-get clean \
        && rm -rf /var/lib/apt/lists/*)

# For CUDA profiling, TensorFlow requires CUPTI.
ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH

# ========== Softlearning dependencies ==========
RUN apt-get update -y \
    && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        git \
        gnupg2 \
        make \
        cmake \
        swig \
        libz-dev \
        unzip \
        zlib1g-dev \
        libglfw3 \
        libglfw3-dev \
        libxrandr2 \
        libxinerama-dev \
        libxi6 \
        libxcursor-dev \
        libgl1-mesa-dev \
        libgl1-mesa-glx \
        libglew-dev \
        libosmesa6-dev \
        lsb-release \
        ack-grep \
        patchelf \
        vim \
        emacs \
        wget \
        xpra \
        xserver-xorg-dev \
        xvfb \
    && export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)" \
    && echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" \
            | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \
    && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg \
            | apt-key add - \
    && apt-get update -y \
    && apt-get install -y google-cloud-sdk \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*


# ========= MuJoCo ===============
COPY ./scripts/install_mujoco.py /tmp/

RUN /tmp/install_mujoco.py --mujoco-path=/root/.mujoco --versions 1.50 2.00 \
    && ln -s /root/.mujoco/mujoco200_linux /root/.mujoco/mujoco200 \
    && rm /tmp/install_mujoco.py

ENV LD_LIBRARY_PATH /root/.mujoco/mjpro150/bin:${LD_LIBRARY_PATH}
ENV LD_LIBRARY_PATH /root/.mujoco/mujoco200/bin:${LD_LIBRARY_PATH}
ENV LD_LIBRARY_PATH /root/.mujoco/mujoco200_linux/bin:${LD_LIBRARY_PATH}

# This is a hack required to make mujocopy to compile in gpu mode
RUN mkdir -p /usr/lib/nvidia-000
ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/usr/lib/nvidia-000


# ========== Conda Environment ==========
COPY ./environment.yml /tmp/environment.yml
COPY ./requirements.txt /tmp/requirements.txt

# # NOTE: Don't separate the Mujoco key echo and remove commands into separate
# # run commands! Otherwise your key will be readable by anyone who has access
# # To the container. We need the key in order to compile mujoco_py.
RUN echo "${MJKEY}" > ~/.mujoco/mjkey.txt \
    && sed -i -e 's/^tensorflow==/tensorflow-gpu==/g' /tmp/requirements.txt \
    && conda env create -f /tmp/environment.yml \
    && echo "conda activate softlearning" >> ~/.bashrc \
    && echo "cd ~/softlearning" >> ~/.bashrc \
    && echo "git config --global --add safe.directory /root/softlearning" >> ~/.bashrc \
    && echo "pip install -r /tmp/requirements.txt" >> ~/.bashrc \
    && echo "pip install opencv-python --only-binary=:all:" >> ~/.bashrc \
    && echo "pip install git+https://github.com/deepmind/dm_control.git@0277e4352c57287c9f8497cb600a2bbe6d82ac45" >> ~/.bashrc \
    && echo "pip install git+https://github.com/avisingh599/multiworld.git@19bf319422c0016260166bf64e194552bf2a9e68" >> ~/.bashrc \
    && echo "pip install git+https://github.com/hartikainen/mujoco-py.git@29fcd26290c9417aef0f82d0628d29fa0dbf0fab" >> ~/.bashrc \
    && echo "pip install git+https://github.com/hartikainen/serializable.git@76516385a3a716ed4a2a9ad877e2d5cbcf18d4e6" >> ~/.bashrc \
    && echo "export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/lib/nvidia-384" >> ~/.bashrc \
    && echo "export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libGLEW.so" >> ~/.bashrc \
    && echo "pip install -e ." >> ~/.bashrc \
    && conda clean --all -y \
    && rm ~/.mujoco/mjkey.txt


    # Install also the right multiworld version
    #  pip install git+https://github.com/avisingh599/multiworld.git@19bf319422c0016260166bf64e194552bf2a9e68
    # mujoco-py fixed by installing the correct version from git
    # pip install git+https://github.com/hartikainen/mujoco-py.git@29fcd26290c9417aef0f82d0628d29fa0dbf0fab
    # Path to the nvidia-drivers added to the LD_LIBRARY_PATH
    # export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/nvidia-384
    # OPenGL Not initialized error fix by
    # export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libGLEW.so
    # To fix the error with 'FeedforwardGaussianPolicy' object has no attribute '_Serializable__initialize'
    # pip install git+https://github.com/hartikainen/serializable.git@76516385a3a716ed4a2a9ad877e2d5cbcf18d4e6
    
RUN echo "cd ~/.mujoco" >> ~/.bashrc \
    && echo "wget https://mujoco.org/download/mujoco210-linux-x86_64.tar.gz" >> ~/.bashrc \
    && echo "tar -xvzf mujoco210-linux-x86_64.tar.gz" >> ~/.bashrc \
    && echo "rm mujoco210-linux-x86_64.tar.gz" >> ~/.bashrc 


# # ========== Install ROS1 Setup ==========
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' && \
    curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add - 

# # It can happen that the side is down and you need to run this command rosedep init again

RUN apt-get update && \
    apt-get install ros-melodic-desktop-full -y && \
    apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential -y \
    && echo "rosdep init" >> ~/.bashrc \ 
    && echo "rosdep update" >> ~/.bashrc 

# # ========== Create ROS Workspace ==========

RUN echo "mkdir -p ~/ros_ws/src" >> ~/.bashrc \
    && echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc \
    && echo "cd ~/ros_ws" >> ~/.bashrc \   
    && echo "catkin_make" >> ~/.bashrc

# # ========== Install Intera SDK Dependencies ==========
RUN apt-get update && \
    apt-get install git-core python-argparse python-wstool python-vcstools python-rosdep ros-melodic-control-msgs ros-melodic-joystick-drivers ros-melodic-xacro ros-melodic-tf2-ros ros-melodic-rviz ros-melodic-cv-bridge ros-melodic-actionlib ros-melodic-actionlib-msgs ros-melodic-dynamic-reconfigure ros-melodic-trajectory-msgs ros-melodic-rospy-message-converter -y

# # ========== COPY Intera SDK File ==========
COPY ./intera.sh /root/ros_ws/intera.sh

# # ========== Install Intera Robot SDK ==========
RUN echo "cd ~/ros_ws/src" >> ~/.bashrc \
    && echo "wstool init ." >> ~/.bashrc \
    && echo "git clone https://github.com/RethinkRobotics/sawyer_robot.git" >> ~/.bashrc \
    && echo "wstool merge sawyer_robot/sawyer_robot.rosinstall" >> ~/.bashrc \
    && echo "wstool update" >> ~/.bashrc \
    && echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc \
    
RUN echo "cd ~/ros_ws" >> ~/.bashrc \
    && echo "catkin_make" >> ~/.bashrc \
    && echo "bash ./intera.sh" >> ~/.bashrc \
    && echo "source devel/setup.bash" >> ~/.bashrc 
    
# # #Hack for gpu rendering for mujoco_py
RUN mkdir -p /usr/lib/nvidia-384
ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/usr/lib/nvidia-384

# # # =========== Container Entrypoint =============
COPY ./docker/entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/usr/bin/tini", "--", "/entrypoint.sh"]
